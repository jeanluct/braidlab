BRAIDLAB STYLE GUIDE
--------------------

If you wish to participate in developing Braidlab, below are some
stylistic guidelines to adhere to.  The easiest way to ensure
compliance, of course, is to simply start a new file by copying an
appropriate existing one.


GENERAL
-------

* No tabs; always use spaces instead.
* Delete extra whitespace at the end of lines, or at the end of files.
* Every file should end with a linebreak (but no extra blank lines at the end).
* Break lines at 78 characters unless there is a compelling reason not
  to (e.g., long URL).
* Indentation in blocks is two spaces.
* If a comment is a full sentence, capitalize and punctuate accordingly.
* Please spell-check and proofread your comments and help messages!
  We're not animals: we try to write well.


VERSION CONTROL
---------------

* See https://github.com/jeanluct/braidlab/wiki/braidlab-workflow.
* Create a branch off develop to implement a new feature or bugfix.
  The branch should be named issXXX-short-description, where XXX is
  its tracker issue number.
* When a bug relates to an exisiting release, and will be part of a
  maintenance release (X.X.1), then first create a release branch
  (X.X.1) off master, then merge into that branch and into develop
  when you're done.  Do not merge into master until the release is
  ready.
* Use a descriptive log message for commits.  If you use more than one
  line (which is fine), the first line should be a summary.
* The log message should have proper punctuation and end with a period.
* When relevant, refer to issues on the GitHub tracker using #.  Put
  the number at the very start so a sequence of related commits are
  more visible.  Example: "#45: Start implementing new feature X."
* Using "closes issue #45" or "resolves issue #45" will automatically
  resolve an issue.  This is a good thing to add to a log message, but
  be careful not to say "does not resolve issue #45"!


MATLAB .m FILES
---------------

* Here is an example of formatting for function help:

function [varargout] = tntype(b)
%TNTYPE   Thurston-Nielsen type of a braid.
%   T = TNTYPE(B) returns the Thurston-Nielsen type of a braid B.  The braid
%   is regarded as labeling an isotopy class on the punctured disk.  The
%   type T can take the values 'finite-order', 'reducible', or
%   'pseudo-Anosov', following the Thurston-Nielsen classification theorem.
%
%   [T,ENTR] = TNTYPE(B) also returns the entropy ENTR of the braid.
%
%   TNTYPE uses Toby Hall's implementation of the Bestvina-Handel algorithm.
%
%   References:
%
%   M. Bestvina and M. Handel, "Train-Tracks for surface homeomorphisms,"
%   Topology 34 (1995), 109-140.
%
%   T. Hall, "Train: A C++ program for computing train tracks of surface
%   homeomorphisms," https://www.liverpool.ac.uk/~tobyhall/T_Hall.html
%
%   W. P. Thurston, "On the geometry and dynamics of diffeomorphisms of
%   surfaces," Bull. Am. Math. Soc. 19 (1988), 417-431.
%
%   This is a method for the BRAID class.
%   See also BRAID, BRAID.ENTROPY.

  Note that three spaces are used between the bold function name and
  the one-line summary.  Three spaces are also used for indenting
  thereafter.  This is to be consistent with Matlab style.  The
  one-line summary has punctuation.

* Optional flags should have the capitalization
  'PropertyName','value'.  That is, the property itself is
  capitalized, but not the value.

* When a file contain more than one function, do not use the
  function...end syntax.  Instead, use the function...function syntax.
  This is to avoid having to indent the first level in the file.
  Separate the functions with a line "% ===...===", as in
  @braid/subbraid.m, for example.

* Global variables should be avoided as much as possible, but if they
  are needed should be of the form BRAIDLAB_global_variable_name, with
  the latter part in all lowercase.


C/C++ FILES
-----------

* Braidlab-specific macros and compiler flags should have the form
  BRAIDLAB_COMPILER_FLAG, all in uppercase.
* In MEX files use the Matlab macros mwSize for size of arrays and
  mwIndex for indexing into them.  Use mwSignedIndex for differences
  between indices.  See
    https://www.mathworks.com/help/matlab/apiref/mwsize.html
    https://www.mathworks.com/help/matlab/apiref/mwindex.html
    https://www.mathworks.com/help/matlab/apiref/mwsignedindex.html
